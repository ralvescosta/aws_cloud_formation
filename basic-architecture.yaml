Resources:
  DefaultVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.101.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-VPC
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependesOn: DefaultVPC
  
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref DefaultVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.100.1.0/24
      VpcId: !Ref DefaultVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PublicSubnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.100.10.0/24
      VpcId: !Ref DefaultVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PrivateSubnet

  # Creating the ElasticIp for the NAT GW
  NATGatewayElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: DefaultVPC
  # Creating the NAT GW
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayElasticIp.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
      - Key: Name
        Value: !Join ['', ["NAT-", !Ref "AWS::StackName" ]]

  # Creating the Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DefaultVPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PrivateRouteTable
  # Creating the Private Route that Connecting to the Route Table and to the NATGateway
  PrivateRoute-1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  # Associating the Private Route table with the Private Subnet
  PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  # Creating the Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DefaultVPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PublicRouteTable
  # Creating the Public Route that Connecting to the Route Table and to the InternetGateway
  PublicRoute-1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # Associating the Public Route table with the Public Subnet
  PublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Creating the Web Security Group
  WebSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Webservers
      GroupDescription: Sec Group for the web servers
      VpcId: !Ref DefaultVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-WebSecGroup
  # Creating the Webserver Elastic IP
  WebServerElasticIp:
    Type: AWS::EC2:EIP
    Properties:
      InstanceId: !Ref WebInstance
      Domain: !Ref DefaultVPC
  # Creating Instance
  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMapping:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 24
            VolumeType: gps
      InstanceType: t2.nano
      ImageId: ami-052efd3df9dad4825
      KeyName: default
      Monitoring: true
      SecurityGroupId:
        - !Ref WebSecGroup
      SubnetId: !Ref PublicSubnet
      AllocationId: !GetAtt WebServerElasticIp.AllocationId
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-WebInstance

  # Creating the DB Security Group
  DBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Database
      GroupDescription: Sec Group for DB
      VpcId: !Ref DefaultVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-DbSecGroup
  # Creating DB Volume
  DBVolume:
    Type: AWS::EC2::Volume
    DeletionPolice: Snapshot
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      Size: 64
      VolumeType: gp2
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-DbVolume
  # Creating Instance
  DBInstance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMapping:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 24
            VolumeType: gps
      InstanceType: t2.nano
      ImageId: ami-052efd3df9dad4825
      KeyName: default
      Monitoring: true
      SecurityGroupId:
        - !Ref DBSecGroup
      SubnetId: !Ref PrivateSubnet
      Volumes:
        - Device: "/dev/sdf"
          VolumeId: !Ref DBVolume
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-DbInstance